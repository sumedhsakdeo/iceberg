/*
 * Licensed to the Apache Software Foundation (ASF) under one
 * or more contributor license agreements.  See the NOTICE file
 * distributed with this work for additional information
 * regarding copyright ownership.  The ASF licenses this file
 * to you under the Apache License, Version 2.0 (the
 * "License"); you may not use this file except in compliance
 * with the License.  You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing,
 * software distributed under the License is distributed on an
 * "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
 * KIND, either express or implied.  See the License for the
 * specific language governing permissions and limitations
 * under the License.
 */
package org.apache.iceberg.spark.extensions;

import static org.assertj.core.api.Assertions.assertThat;
import static org.assertj.core.api.Assumptions.assumeThat;

import com.fasterxml.jackson.core.JsonProcessingException;
import java.util.List;
import org.apache.iceberg.ParameterizedTestExtension;
import org.apache.iceberg.Table;
import org.apache.iceberg.spark.actions.EmbeddingModelBuilder;
import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.TestTemplate;
import org.junit.jupiter.api.extension.ExtendWith;

@ExtendWith(ParameterizedTestExtension.class)
public class TestComputeTableEmbeddingsProcedure extends ExtensionsTestBase {

  @AfterEach
  public void removeTables() {
    sql("DROP TABLE IF EXISTS %s", tableName);
  }

  @TestTemplate
  public void testComputeTableEmbeddings() throws JsonProcessingException {
    assumeThat(catalogName).isEqualToIgnoringCase("spark_catalog");

    String text = "hello";
    sql("CREATE TABLE %s (id int, data string) USING iceberg", tableName);
    sql("INSERT into %s values(1, '%s')", tableName, text);

    Table table = validationCatalog.loadTable(tableIdent);

    assertThat(table.statisticsFiles()).isEmpty();

    List<Object[]> sqlOutput =
        sql(
            "CALL %s.system.compute_table_embeddings ("
                + "table => '%s', "
                + "model_name => '%s', "
                + "model_inputs => map('x', 'y'), "
                + "snapshot_id => %s, "
                + "columns => array('data') "
                + ")",
            catalogName,
            tableName,
            EmbeddingModelBuilder.ALL_MINI_LM_L6V2,
            table.currentSnapshot().snapshotId());
    assertThat(sqlOutput.size()).isEqualTo(1);
    table.refresh();

    assertThat(table.statisticsFiles()).isNotEmpty();
    List<Object[]> sqlOutput1 =
        sql(
            "CALL %s.system.load_table_embeddings ("
                + "table => '%s', "
                + "snapshot_id => %s"
                + ")",
            catalogName, tableName, table.currentSnapshot().snapshotId());
    assertThat(sqlOutput1.size()).isEqualTo(1);
    String embeddingJson = (String) sqlOutput1.get(0)[0];
    String expectedJson =
        "[ {"
            + "  \"textEmbeddings\" : [ {"
            + "    \"textSegment\" : {"
            + "      \"text\" : \"hello\","
            + "      \"metadata\" : {"
            + "        \"metadata\" : {"
            + "          \"model_name\" : \"allminilml6v2\","
            + "          \"column_name\" : \"data\""
            + "        }"
            + "      }"
            + "    },"
            + "    \"embedding\" : {"
            + "      \"vector\" : [ -0.0627718, 0.054958887, 0.0521648, 0.08578996, -0.08274895, -0.074572995, 0.0685547, 0.018396318, -0.082011335, -0.03738479, 0.012124916, 0.0035183101, -0.0041342797, -0.043784432, 0.021807382, -0.005102755, 0.019546652, -0.04234873, -0.110359624, 0.00542446, -0.055734824, 0.028052563, -0.023158714, 0.028481418, -0.05370966, -0.052601647, 0.03393926, 0.045388613, 0.023718497, -0.073120795, 0.05477769, 0.017047228, 0.08136043, -0.0028627564, 0.011958097, 0.07355859, -0.09423747, -0.08136207, 0.040015344, 6.9220917E-4, -0.013393273, -0.05453813, 0.0051514474, -0.026139801, 0.036806993, -0.03395963, 0.021093206, 0.055948913, 0.057781443, -0.0054183924, -0.06841313, -0.09023706, -0.04286676, 0.02365268, 0.121493526, 0.032392878, -0.022659387, -0.023281753, 0.048866004, -0.059351552, -0.03406606, 0.035962652, -0.08115783, -0.021979563, 0.01318793, -0.0458555, -0.07041978, -0.05260325, -0.04802923, -0.07454621, -0.028731812, 0.012831961, -0.04292172, 0.005366474, -0.039097596, 0.015919283, 0.020243539, 0.0052667125, 0.009581313, -0.0047677294, 0.048087742, -0.07309658, -0.050344497, 0.009653049, 0.013496632, 4.3022665E-4, 0.019725252, 0.06249544, -0.018227283, 0.031097176, -0.08885386, 0.0481323, 0.026074283, -0.011494022, -0.09936173, -0.027338225, 0.07621532, -0.0020965426, -0.12358881, 0.29806504, 0.056306336, 0.078480005, 0.011043587, 0.05240014, -0.0011880044, 9.656953E-4, -0.054327242, 0.02676467, -0.0121941725, 0.010717114, -3.7145743E-5, -0.0355657, -0.032085482, 0.016168676, 0.08674965, 0.018139385, -0.011017561, 0.0497403, 0.022581039, -2.2357828E-5, 0.014939027, -0.011176227, 0.0056593134, -0.0041147894, 0.0031826214, 0.023865052, 0.018051146, -5.850473E-33, 0.056107003, -0.03449844, 0.03311181, 0.1677229, -0.031038094, -0.00483535, -0.061064973, -0.062710956, 0.02742659, 0.06364016, 0.04334045, 0.060829423, -0.018160876, 0.042804148, 0.01902403, 0.0879779, -0.03913279, 0.044142585, -0.00494106, 0.051052727, -0.054319143, 0.01117304, 0.026699007, 0.0750966, 0.04869023, -0.04354283, 0.013338657, -0.102629825, 0.052156664, 0.022232378, -0.029741697, -0.04227072, 0.022984643, 0.039574444, 0.0090947915, 0.020864746, 0.0050926288, -0.062764145, -0.05021758, -0.0052249455, -0.053498287, 0.029773487, 0.021753658, -0.02067797, 0.023866119, 0.0058066547, -0.0012138563, 0.022660317, 0.003156647, 0.030960435, -0.052968077, 0.018676968, -0.14015336, 0.041478235, -0.010278243, -0.011593206, -0.033458177, -0.050588984, 0.04686783, 0.024715036, 0.033496793, 0.111707516, -0.04034858, -0.0042844843, -0.08074357, -0.05611216, 0.038338605, 0.011508308, 0.06873786, -0.038117327, -0.045988258, -0.01643961, 0.024412975, 0.011722119, 0.008168529, 0.0390369, 0.026186585, 0.010481801, 0.042860247, -0.046381574, 0.006481195, 0.044423334, -0.018837584, 0.0072633005, 0.056179505, 0.053478003, -0.021483833, -0.0844858, -0.01281397, -0.03947553, -0.058026515, 0.031333968, 0.045417354, 0.011839096, -0.017906213, 4.5862114E-33, 0.1315079, 0.07932807, -0.09495956, -0.024472205, -0.055816196, -0.009145242, -0.03209042, 0.11379318, -0.1444162, 0.00850955, 0.030667098, -0.012414909, 0.07017048, 0.02817987, 0.0408221, 0.019590793, 0.14295043, 0.0568699, -0.040122095, -0.0178439, -0.061384447, 8.760151E-4, -0.05490609, -0.007102558, -4.941337E-4, -0.013119376, -0.0022668322, 0.058566716, -0.099715024, -0.025532423, 0.07856457, 0.020517683, -0.0046334066, 0.03030257, 0.016833283, 0.091437526, 0.016769672, -0.07980286, 0.042510297, -0.08439727, -0.023859005, 0.047019426, 0.0024148975, 0.10931786, -0.033905376, -0.06402092, -0.03772385, 0.02907477, -0.04244929, 0.015861792, -0.09060648, -0.05576633, 0.022608753, 0.008000389, -0.022470014, 0.022058176, -0.025199108, 0.030339519, 0.010110767, -0.018547347, 0.016989606, 0.076310195, 0.041620605, 0.08752067, -0.012092784, 0.031135153, -0.032190423, 0.012798029, 0.013538772, -0.029752428, 0.036789853, -0.0058459453, -0.011055542, 0.038670305, -0.020741522, -0.011265111, -0.023767589, -0.009984533, -0.02310836, 0.012011365, -0.010644483, 0.05136062, -0.027734082, -2.1148619E-4, 9.463074E-4, -0.03158256, 0.05122931, 0.044328555, -0.003773451, -0.041667998, 0.028954629, 0.033061337, -0.015184341, -1.5763554E-4, -0.04412442, -1.4803495E-8, -0.0086959805, 1.3004924E-4, 0.01647111, 0.05922887, 0.045538757, 0.033126846, -0.09335855, -0.0390272, -0.020656135, 0.012607462, 0.06953945, 0.0791919, -0.071910866, -0.00478501, 0.08800476, 0.047588523, -0.05219271, -0.007525542, -0.0577118, -0.092958376, -0.004501536, 0.0011780452, 0.024447193, -0.064039685, -0.0032275415, -0.02796536, -0.03540753, 0.025036668, -0.009852766, 0.013252452, 0.0011385069, 0.17805423, -0.036146306, -0.007625875, -0.032201286, -0.0422932, 0.004774403, 0.028531764, 0.07472298, -0.014894111, -0.0562207, 0.027235812, -0.011199358, -0.10166788, -0.019529197, 0.027246488, 0.035081014, -0.081605636, -0.001337863, -0.07635191, -0.0399573, 0.040781938, 0.060128637, 0.07254576, 0.069675066, 0.08909131, 0.015957803, -0.014873489, -0.04674152, -0.013411219, 0.065134674, 0.050905917, 0.05148353, 0.0070921537 ]"
            + "    }"
            + "  } ]"
            + "} ]";
    System.out.println(embeddingJson);
  }
}
